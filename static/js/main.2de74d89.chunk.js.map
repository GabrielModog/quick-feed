{"version":3,"sources":["logo.svg","components/Episode.jsx","components/EpisodeList.jsx","components/UserForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Episode","react_default","a","createElement","this","props","title","href","link","description","Component","EpisodeList","renderEpisodeList","_this","program_title","creator","src","program_image","program_description","episodes","map","returnEpisodes","episode","i","components_Episode","key","index","enclosure","url","image","UserForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","enabled","handleSearchChange","bind","assertThisInitialized","e","target","value","setState","onSubmit","getFeed","Input_default","style","margin","display","type","name","onChange","Button_default","variant","color","disabled","App","fetching","preventDefault","feed_url","elements","parser","require","customFields","item","keepArray","asyncToGenerator","regenerator_default","mark","_callee","feed","arr","wrap","_context","prev","next","parseURL","sent","console","log","items","forEach","push","error","t0","stop","handleClose","renderAlert","index_es","open","aria-labelledby","aria-describedby","id","onClick","autoFocus","_this2","className","components_UserForm","logo","components_EpisodeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2de74d89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b068a0a.svg\";","import React, { Component } from \"react\";\n\nclass Episode extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.title}\n        <a href={this.props.link}>{this.props.title}</a>\n        <p>{this.props.description}</p>\n      </div>\n    );\n  }\n}\n\nexport default Episode;\n","import React, { Component } from \"react\";\nimport Episode from \"./Episode\";\n\nclass EpisodeList extends Component {\n  renderEpisodeList = () => {\n    return (\n      <div>\n        <h1>\n          {this.props.program_title} by {this.props.creator}\n        </h1>\n        <img src={this.props.program_image} />\n        <p>{this.props.program_description}</p>\n        {this.props.episodes.map(this.returnEpisodes)}\n      </div>\n    );\n  };\n\n  returnEpisodes = (episode, i) => {\n    return (\n      <Episode\n        key={i}\n        index={i}\n        title={episode.title}\n        enclosure={episode.enclosure}\n        link={\n          episode.enclosure\n            ? episode.enclosure.url\n            : \"json_data is null or undefined\"\n        }\n        image={this.props.program_image}\n        description={episode.description}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div>{this.props.episodes ? this.renderEpisodeList() : <div />}</div>\n    );\n  }\n}\n\nexport default EpisodeList;\n","import React, { Component } from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\n\nclass UserForm extends Component {\n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      enabled: true,\n    };\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  handleSearchChange(e) {\n    const value = e.target.value;\n\n    if (value != '') { \n      this.setState({enabled : false});\n    } else {\n      this.setState({enabled : true});\n    }\n  };  \n\n  render() {\n    return (\n      <form onSubmit={this.props.getFeed}>\n        <Input\n          style={{ margin: \"20px auto\", display: \"block\" }}\n          type=\"text\"\n          name=\"feed_url\"\n          onChange={this.handleSearchChange}\n        />\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" disabled={this.state.enabled}>\n          Submit\n        </Button>\n      </form>\n    );  \n};\n};\n\nexport default UserForm;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport EpisodeList from \"./components/EpisodeList\";\nimport UserForm from \"./components/UserForm\";\nimport logo from \"./logo.svg\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from \"@material-ui/core\";\n\nclass App extends Component {\n  state = {\n    episodes: null,\n    fetching: false,\n    program_title: null,\n    program_description: null,\n    program_image: null\n  };\n\n  getFeed = e => {\n    this.setState({ fetching: !this.state.fetching });\n    e.preventDefault();\n    const feed_url = e.target.elements.feed_url.value;\n    let Parser = require(\"rss-parser\");\n    let parser = new Parser({\n      customFields: {\n        item: [[\"enclosure\", { keepArray: true }]]\n      }\n    });\n    const CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\n    if (feed_url) {\n      (async () => {\n        try {\n          let feed = await parser.parseURL(CORS_PROXY + feed_url);\n          let arr = [];\n          console.log(\"feed: \" + feed);\n          feed.items.forEach(item => {\n            arr.push(item);\n          });\n          this.setState({\n            episodes: arr,\n            program_title: feed.title,\n            fetching: !this.state.fetching,\n            program_image: feed.image.url,\n            program_description: feed.description,\n            error: false\n          });\n        } catch (err) {\n          console.log(err);\n          this.setState({ error: true, fetching: false });\n        }\n      })();\n    } else {\n      return;\n    }\n  };\n\n  handleClose = () => {\n    this.setState({\n      error: false,\n      fetching: false\n    });\n  };\n\n  renderAlert = () => {\n    return (\n      <div>\n        <Dialog\n          open={this.state.error}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">Error Parsing Feed</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Please try retyping your RSS feed, or try a new one.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">quick-feed</h1>\n        </header>\n        <UserForm\n          getFeed={this.getFeed}\n          onClick={() => this.setState({ fetching: true })}\n        />\n        {this.state.error ? this.renderAlert() : <div />}\n        {!this.state.fetching ? (\n          <p>Please enter an RSS feed</p>\n        ) : (\n          <div>\n            <img src={logo} className=\"App-logo\" />\n          </div>\n        )}\n        <EpisodeList\n          episodes={this.state.episodes}\n          program_title={this.state.program_title}\n          program_description={this.state.program_description}\n          program_image={this.state.program_image}\n          fetching={this.props.fetching}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}